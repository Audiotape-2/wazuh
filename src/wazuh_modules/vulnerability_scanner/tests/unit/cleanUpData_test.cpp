/*
 * Wazuh Vulnerability Scanner - Unit Tests
 * Copyright (C) 2015, Wazuh Inc.
 * February 21, 2024.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#include "cleanUpData_test.hpp"
#include "MockIndexerConnector.hpp"
#include "MockInventorySync.hpp"
#include "TrampolineOsDataCache.hpp"
#include "cleanUpData.hpp"

TEST_F(CleanUpDataTest, DeleteAllOperationType)
{
    std::shared_ptr<MockIndexerConnector> mockIndexerConnector = std::make_shared<MockIndexerConnector>();
    EXPECT_CALL(
        *mockIndexerConnector,
        publish(
            "{\"id\":\"node01_001_ec465b7eb5fa011a336e95614072e4c7f1a65a53_CVE-2024-5678\",\"operation\":\"DELETED\"}"))
        .Times(1);
    EXPECT_CALL(
        *mockIndexerConnector,
        publish(
            "{\"id\":\"node01_001_ec465b7eb5fa011a336e95614072e4c7f1a65a53_CVE-2023-5362\",\"operation\":\"DELETED\"}"))
        .Times(1);
    EXPECT_CALL(*mockIndexerConnector,
                publish("{\"id\":\"node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2021-33560\",\"operation\":"
                        "\"DELETED\"}"))
        .Times(1);
    EXPECT_CALL(*mockIndexerConnector,
                publish("{\"id\":\"node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2019-13627\",\"operation\":"
                        "\"DELETED\"}"))
        .Times(1);
    EXPECT_CALL(*mockIndexerConnector,
                publish("{\"id\":\"node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2021-40528\",\"operation\":"
                        "\"DELETED\"}"))
        .Times(1);

    auto cleanUpData = std::make_shared<TCleanUpData<MockIndexerConnector, TScanContext<TrampolineOsDataCache>>>(
        mockIndexerConnector, *m_inventoryDatabase);

    nlohmann::json jsonData;
    jsonData["action"] = "cleanup";

    std::variant<const SyscollectorDeltas::Delta*, const SyscollectorSynchronization::SyncMsg*, const nlohmann::json*>
        data = &jsonData;
    auto context = std::make_shared<TScanContext<TrampolineOsDataCache>>(data);

    EXPECT_NO_THROW(cleanUpData->handleRequest(context));
}

TEST_F(CleanUpDataTest, DeleteAllOperationTypeNoIndexerConnector)
{
    auto cleanUpData = std::make_shared<TCleanUpData<MockIndexerConnector, TScanContext<TrampolineOsDataCache>>>(
        nullptr, *m_inventoryDatabase);

    nlohmann::json jsonData;
    jsonData["action"] = "cleanup";

    std::variant<const SyscollectorDeltas::Delta*, const SyscollectorSynchronization::SyncMsg*, const nlohmann::json*>
        data = &jsonData;
    auto context = std::make_shared<TScanContext<TrampolineOsDataCache>>(data);

    EXPECT_NO_THROW(cleanUpData->handleRequest(context));
}

TEST_F(CleanUpDataTest, SingleDeleteAndInsertOperationType)
{
    std::shared_ptr<MockIndexerConnector> mockIndexerConnector = std::make_shared<MockIndexerConnector>();
    EXPECT_CALL(
        *mockIndexerConnector,
        publish(
            "{\"id\":\"node01_001_ec465b7eb5fa011a336e95614072e4c7f1a65a53_CVE-2024-5678\",\"operation\":\"DELETED\"}"))
        .Times(1);
    EXPECT_CALL(
        *mockIndexerConnector,
        publish(
            "{\"id\":\"node01_001_ec465b7eb5fa011a336e95614072e4c7f1a65a53_CVE-2023-5362\",\"operation\":\"DELETED\"}"))
        .Times(1);
    EXPECT_CALL(*mockIndexerConnector,
                publish("{\"id\":\"node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2021-33560\",\"operation\":"
                        "\"DELETED\"}"))
        .Times(1);
    EXPECT_CALL(*mockIndexerConnector,
                publish("{\"id\":\"node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2019-13627\",\"operation\":"
                        "\"DELETED\"}"))
        .Times(1);
    EXPECT_CALL(*mockIndexerConnector,
                publish("{\"id\":\"node01_001_fdbd3c83c04c74d0cc7ad2f0e04ed88adfd74ad5_CVE-2021-40528\",\"operation\":"
                        "\"DELETED\"}"))
        .Times(1);

    auto cleanUpData = std::make_shared<TCleanUpData<MockIndexerConnector, TScanContext<TrampolineOsDataCache>>>(
        mockIndexerConnector, *m_inventoryDatabase);

    nlohmann::json jsonData = nlohmann::json::parse(
        R"({"agent_info":  {"agent_id":"001",  "agent_version":"4.8.0",  "agent_name":"test_agent_name",  "agent_ip":"10.0.0.1",  "node_name":"node01"},  "action":"upgradeAgentDB"})");

    std::variant<const SyscollectorDeltas::Delta*, const SyscollectorSynchronization::SyncMsg*, const nlohmann::json*>
        data = &jsonData;
    auto context = std::make_shared<TScanContext<TrampolineOsDataCache>>(data);

    EXPECT_NO_THROW(cleanUpData->handleRequest(context));
}

TEST_F(CleanUpDataTest, SingleDeleteAndInsertOperationTypeNoIndexerConnector)
{
    auto cleanUpData = std::make_shared<TCleanUpData<MockIndexerConnector, TScanContext<TrampolineOsDataCache>>>(
        nullptr, *m_inventoryDatabase);

    nlohmann::json jsonData = nlohmann::json::parse(
        R"({"agent_info":  {"agent_id":"001",  "agent_version":"4.8.0",  "agent_name":"test_agent_name",  "agent_ip":"10.0.0.1",  "node_name":"node01"},  "action":"upgradeAgentDB"})");

    std::variant<const SyscollectorDeltas::Delta*, const SyscollectorSynchronization::SyncMsg*, const nlohmann::json*>
        data = &jsonData;
    auto context = std::make_shared<TScanContext<TrampolineOsDataCache>>(data);

    EXPECT_NO_THROW(cleanUpData->handleRequest(context));
}
