import subprocess
import os
import sys

# rpmdev-vercmp

import rpm

# from yum and rpmlint, with less internal assumptions, and returning
# empty strings instead of None for missing bits
def stringToEVR(verstring):
    if verstring in (None, ''):
        return ('', '', '')
    i = verstring.find(':')
    if i == -1:
        epoch = ''
    else:
        epoch = verstring[:i]
    i += 1
    j = verstring.find('-', i)
    if j == -1:
        version = verstring[i:]
        release = ''
    else:
        version = verstring[i:j]
        release = verstring[j + 1:]
    return (epoch, version, release)


def rpm_ver_cmp(ver_left, ver_right):

    (e1, v1, r1) = stringToEVR(ver_left)
    (e2, v2, r2) = stringToEVR(ver_right)

    for tag in 'e1', 'v1', 'r1', 'e2', 'v2', 'r2':
        value = eval(tag) or ''
        if '-' in value:
            if tag.startswith('e'):
                tag = 'epoch' + tag[1:]
            elif tag.startswith('v'):
                tag = 'version' + tag[1:]
            elif tag.startswith('r'):
                tag = 'release' + tag[1:]

    evr1 = '%s%s%s' % (e1 and e1 + ':' or '', v1 or '', r1 and '-' + r1 or '')
    evr2 = '%s%s%s' % (e2 and e2 + ':' or '', v2 or '', r2 and '-' + r2 or '')

    rc = rpm.labelCompare((e1 or None, v1 or None, r1 or None),
                          (e2 or None, v2 or None, r2 or None))
    if rc > 0:
        rc = 1
    elif rc < 0:
        rc = -1

    return rc

# rpmdev-vercmp

input_folder = sys.argv[1]
starting_character = sys.argv[2]
out_path = os.environ['GITHUB_WORKSPACE']

binary = f"{out_path}/src/wazuh_modules/vulnerability_scanner/build/testtool/versionCompare/version_compare_testtool"

for file in os.listdir(f"{input_folder}"):
    if file.endswith(".out") and file[0] == starting_character:
        with open(f"{input_folder}/{file}", "r") as f:
            with open(f"{out_path}/version_test_results/{file}_results.txt", "w") as f_out:
                line = f.readline()
                print(f"Analyzing file: {file}")
                while line:
                    data = line.split()
                    for v1 in range(1,len(data)):
                        for v2 in range(v1, len(data)):
                            cmd = f"{binary} {data[v1]} {data[v2]}"
                            out = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=True, check=False)
                            expected = rpm_ver_cmp(data[v1], data[v2])
                            if(out.returncode == expected or (out.returncode == 255 and expected == -1)):
                                f_out.write(f"Success: {data[0]} {out.returncode} {out.stdout.decode()}")
                            else:
                                f_out.write(f"Failure: {data[0]}. Expected: {expected}. Current: {out.returncode} {out.stdout.decode()}")

                    line = f.readline()
