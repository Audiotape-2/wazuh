/*
 * Wazuh Vulnerability scanner - Database Feed Manager
 * Copyright (C) 2015, Wazuh Inc.
 * November 3, 2023.
 *
 * This program is free software; you can redistribute it
 * and/or modify it under the terms of the GNU General Public
 * License (version 2) as published by the FSF - Free Software
 * Foundation.
 */

#ifndef _VERSION_MATCHER_HPP
#define _VERSION_MATCHER_HPP

#include "iVersionObjectInterface.hpp"
#include "loggerHelper.h"
#include "versionObjectCalVer.hpp"
#include "versionObjectDpkg.hpp"
#include "versionObjectMajorMinor.hpp"
#include "versionObjectPEP440.hpp"
#include "versionObjectRpm.hpp"
#include "versionObjectSemVer.hpp"
#include "vulnerabilityScannerDefs.hpp"
#include <memory>
#include <stdexcept>
#include <string>
#include <variant>

enum class VersionComparisonResult : int
{
    A_LESS_THAN_B,
    A_EQUAL_B,
    A_GREATER_THAN_B
};

enum class VersionMatcherStrategy : int
{
    Unspecified = 0,
    Windows = 1,
    MacOS = 2,
    Pacman = 3,
    Snap = 4,
    PKG = 5,
    APK = 6,
    DPKG = 7,
    RPM = 8,
    PEP440 = 9,
    SemVer = 10,
};

/**
 * @brief VersionMatcher class.
 *
 */
class VersionMatcher final
{
private:
    /**
     * @brief Creates the corresponding version object using a type (VersionMatcherStrategy).
     *
     * @note A strategy is a set of rules to match a version string to a version object. For example, the default
     * strategy is to try to match the version string to a CalVer object, if it doesn't match, then it tries to match it
     * to a PEP440 object, and so on. If the version string doesn't match any of the specified types, it will return a
     * nullptr.
     *
     *
     * @param version string version item to create object from
     * @param type VersionMatcherStrategy to use.
     * @return std::shared_ptr<IVersionObject>
     */
    static std::shared_ptr<IVersionObject> createVersionObject(const std::string& version, const int type)
    {
        std::shared_ptr<IVersionObject> matcher = nullptr;
        const auto& strategy = static_cast<VersionMatcherStrategy>(type);

        CalVer calVer {};
        PEP440 pep440 {};
        MajorMinor majorMinor {};
        SemVer semVer {};
        Dpkg dpkgVer {};
        Rpm rpmVer {};

        switch (strategy)
        {
            case VersionMatcherStrategy::RPM:
                if (VersionObjectRpm::match(version, rpmVer))
                {
                    matcher = std::make_shared<VersionObjectRpm>(version);
                }
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (RPM) for RPM strategy. Version string doesn't match the "
                          "specified type. "
                          "Version string: %s",
                          version.c_str());
                break;
            case VersionMatcherStrategy::PEP440:
                if (VersionObjectPEP440::match(version, pep440))
                {
                    matcher = std::make_shared<VersionObjectPEP440>(version);
                }
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (PEP440) for PiPy strategy. Version string doesn't match the "
                          "specified type. "
                          "Version string: %s",
                          version.c_str());
                break;
            case VersionMatcherStrategy::SemVer:
                if (VersionObjectSemVer::match(version, semVer))
                {
                    matcher = std::make_shared<VersionObjectSemVer>(version);
                }
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (SemVer) for SemVer strategy. Version string doesn't match the "
                          "specified type. "
                          "Version string: %s",
                          version.c_str());
                break;
            case VersionMatcherStrategy::Windows:
                if (VersionObjectDpkg::match(version, dpkgVer))
                {
                    matcher = std::make_shared<VersionObjectDpkg>(version);
                }
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (DPKG) for Windows strategy. Version string doesn't match the "
                          "specified type. "
                          "Version string: %s",
                          version.c_str());
                break;
            case VersionMatcherStrategy::MacOS:
                if (VersionObjectDpkg::match(version, dpkgVer))
                {
                    matcher = std::make_shared<VersionObjectDpkg>(version);
                }
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (DPKG) for MacOS strategy. Version string doesn't match the "
                          "specified type. "
                          "Version string: %s",
                          version.c_str());
                break;
            case VersionMatcherStrategy::Pacman:
                if (VersionObjectDpkg::match(version, dpkgVer))
                {
                    matcher = std::make_shared<VersionObjectDpkg>(version);
                }
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (DPKG) for Pacman strategy. Version string doesn't match the "
                          "specified type. "
                          "Version string: %s",
                          version.c_str());
                break;
            case VersionMatcherStrategy::Snap:
                if (VersionObjectDpkg::match(version, dpkgVer))
                {
                    matcher = std::make_shared<VersionObjectDpkg>(version);
                }
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (DPKG) for Snap strategy. Version string doesn't match the "
                          "specified type. "
                          "Version string: %s",
                          version.c_str());
                break;
            case VersionMatcherStrategy::PKG:
                if (VersionObjectDpkg::match(version, dpkgVer))
                {
                    matcher = std::make_shared<VersionObjectDpkg>(version);
                }
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (DPKG) for PKG strategy. Version string doesn't match the "
                          "specified type. "
                          "Version string: %s",
                          version.c_str());
                break;
            case VersionMatcherStrategy::APK:
                if (VersionObjectDpkg::match(version, dpkgVer))
                {
                    matcher = std::make_shared<VersionObjectDpkg>(version);
                }
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (DPKG) for Debian strategy. Version string doesn't match the "
                          "specified type. "
                          "Version string: %s",
                          version.c_str());
                break;
            case VersionMatcherStrategy::DPKG:
                if (VersionObjectDpkg::match(version, dpkgVer))
                {
                    matcher = std::make_shared<VersionObjectDpkg>(version);
                }
                logDebug2(WM_VULNSCAN_LOGTAG,
                          "Error creating VersionObject (DPKG) for Debian strategy. Version string doesn't match the "
                          "specified type. "
                          "Version string: %s",
                          version.c_str());
                break;
            case VersionMatcherStrategy::Unspecified:
                if (VersionObjectCalVer::match(version, calVer))
                {
                    matcher = std::make_shared<VersionObjectCalVer>(version);
                }
                else if (VersionObjectPEP440::match(version, pep440))
                {
                    matcher = std::make_shared<VersionObjectPEP440>(version);
                }
                else if (VersionObjectMajorMinor::match(version, majorMinor))
                {
                    matcher = std::make_shared<VersionObjectMajorMinor>(version);
                }
                else if (VersionObjectSemVer::match(version, semVer))
                {
                    matcher = std::make_shared<VersionObjectSemVer>(version);
                }
                else if (VersionObjectDpkg::match(version, dpkgVer))
                {
                    matcher = std::make_shared<VersionObjectDpkg>(version);
                }
                else if (VersionObjectRpm::match(version, rpmVer))
                {
                    matcher = std::make_shared<VersionObjectRpm>(version);
                }
                else
                {
                    logDebug2(WM_VULNSCAN_LOGTAG,
                              "Error creating VersionObject (Unspecified). Version string doesn't match "
                              "any of the specified types. Version string: %s",
                              version.c_str());
                }
                break;

                return matcher;
        }
    } // LCOV_EXCL_LINE

public:
    /**
     * @brief Compares 2 version strings.
     *
     * @param versionA string version item A to compare
     * @param versionB string version item B to compare
     * @param type Version object or matcher strategy to compare A and B.
     * @return VersionComparisonResult result of the comparison.
     */
    static VersionComparisonResult compare(const std::string& versionA, const std::string& versionB, int type)
    {
        auto pVersionObjectA = createVersionObject(versionA, type);
        auto pVersionObjectB = createVersionObject(versionB, type);

        if (pVersionObjectA && pVersionObjectB && pVersionObjectA->getType() == pVersionObjectB->getType())
        {

            if (*pVersionObjectA == *pVersionObjectB)
            {
                return VersionComparisonResult::A_EQUAL_B;
            }
            else if (*pVersionObjectA < *pVersionObjectB)
            {
                return VersionComparisonResult::A_LESS_THAN_B;
            }
            else
            {
                return VersionComparisonResult::A_GREATER_THAN_B;
            }
        }

        throw std::invalid_argument("Unable to compare versions (" + versionA + " vs " + versionB + ").");
    }

    /**
     * @brief Checks whether a version string matches the given version type.
     *
     * @details An unspecified version type is not allowed.
     *
     * @param version Version to validate.
     * @param type Version object or matcher strategy.
     * @return true If the version is valid.
     * @return false If the version is not valid.
     */
    static bool match(const std::string& version, int type)
    {
        return (nullptr != createVersionObject(version, type));
    }
};

#endif // _VERSION_MATCHER_HPP
